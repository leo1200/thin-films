close all;
clc;
clear all;

%% Source Parameters
% Free-space wavelength  [nm]
lam0 = 632.8;
% Polar/Zenith angle  [Â°]
theta = 25; theta = deg2rad(theta);
% Azimuthal angle 
phi = 0; phi = deg2rad(phi);
% Polarization state
polstate = "Linear TE/perpendicular/s"; [pte,ptm] = polanalyze(polstate);

%% Build Device
% Reflection Side/Frontside/Environment
%Relative permeability (reflection side) 
ur1 = 1;
% Relative permittivity (reflection side) ; Note that 
er1 = 1;
% Growth Layer
%Growth rate  [nm/min]
v = 747.9/(7049/60); v=v/60;
%Growth time  [s]
dt = 7049;
% Relative permeability (growth layer) 
urv = 1;
% Relative permittivity (growth layer) ; Note that 
erv = (1.57)^2;

% Intermediate/Base Layers; Note the Order: Reflection Side -> Transmission Side
% Thicknesses  (baselayers) [nm]
L = [ 24.2 , 10 ];
% Relative permeabilities  (baselayers)
UR = [ 1 , 1 ];
% Relative permittivities  (baselayers); Note that 
ER = [ 1.57^2 , 1.45704^2 ];
% Transmission Side/Backside/Substrate
% Backside transmission/reflection
trn0 = 1;
% Relative permeability (transmission side) 
ur2 = 1;
% Relative permittivity (transmission side) ; Note that 
er2 = (3.8827+0.019626i)^2;

% Run Simulation
coarseness = 1;
 
clf;
[REFtil,calt,calL] = plot_simulation(dt,coarseness,urv,UR,erv,ER,L,v,lam0,theta,phi,pte,ptm,ur1,er1,ur2,er2,trn0);


function [REFtil,calt,calL] = plot_simulation(dt,coarseness,urv,UR,erv,ER,L,v,lam0,theta,phi,pte,ptm,ur1,er1,ur2,er2,trn0)
    tic
    if mod(dt, coarseness) == 0
        num_points = dt / coarseness + 1; % +1 for t=0
    else
        num_points = floor(dt / coarseness) + 2; % +2 for t=0 and t=dt
    end
    REFtil = zeros(num_points,1);
    TRNtil = zeros(num_points,1);
    CONtil = zeros(num_points,1);
    calt   = zeros(num_points,1);
    calL   = zeros(num_points,1);
    UR = [ urv , UR ];
    ER = [ erv , ER ];
    L  = [ 0 , L ];
    index = 1;
    for t = 0:1:dt
        if t == 0 || t == dt || mod(t, coarseness) == 0
            L(1) = v*t;
            [REFtil(index),TRNtil(index),CONtil(index)] = tmm1d(lam0,theta,phi,pte,ptm,ur1,er1,ur2,er2,trn0,UR,ER,L);
            calt(index) = t;
            calL(index) = L(1);
            index = index + 1;
        end
    end
    simulationTime = toc;
    fprintf('The simulation took %.7f s\n', simulationTime);
    
    hold on;
    p1 = plot(calt,CONtil.*100,'-g','LineWidth',1);
    p2 = plot(calt,REFtil.*100,'-b','LineWidth',1);
    p3 = plot(calt,TRNtil.*100,'-r','LineWidth',1);
    % Set axis limits
    xlim([0 dt]);
    ylim([0 110]);
    
    % Set axis labels
    xlabel('Time [s]', 'Interpreter', 'LaTeX', 'Rotation', 0, 'FontSize', 18);
    ylabel('Power fractions [\%]', 'Interpreter', 'LaTeX', 'Rotation', 90, 'FontSize', 18);
    
    % Add legend with automatic color matching
    legend([p1, p2, p3], {'Conservation', 'Reflectance', 'Transmittance'}, 'Location', 'northeastoutside');
    % Enable the box around the plot to restore upper and right lines
    box on;
    
    % Adjust the main plot position to create equal spacing for labels
    ax1 = gca; % current axis (primary)
    ax1.Position(2) = ax1.Position(2) + 0.25; % Move the main plot up slightly
    ax1.Position(4) = ax1.Position(4) * 0.7; % Squeeze the plot height to create space
    
    % Adding a secondary x-axis for Thickness [nm] below the primary x-axis
    ax2 = axes('Position', ax1.Position, 'XAxisLocation', 'bottom', 'YAxisLocation', 'right', 'Color', 'none');
    
    % Set limits for the secondary x-axis
    set(ax2, 'XLim', [0 dt], 'YColor', 'none'); % Match x-limits and disable y-axis
    
    % Limit the number of ticks on the secondary x-axis to prevent overcrowding
    max_ticks = 10; % Set maximum number of ticks to display
    
    if length(calt) > max_ticks
        tick_indices = round(linspace(1, length(calt), max_ticks)); % Select only a subset of tick indices
    else
        tick_indices = 1:length(calt); % Use all ticks if below max_ticks
    end
    
    set(ax2, 'XTick', calt(tick_indices), 'XTickLabel', sprintfc('%.1f', calL(tick_indices)), 'XTickLabelRotation', 90); 
    
    % Label for the secondary x-axis
    xlabel(ax2, 'Thickness [nm]', 'Interpreter', 'LaTeX', 'FontSize', 18, 'VerticalAlignment', 'top');
    
    % Position the secondary x-axis closer to the primary x-axis for equal spacing
    ax2.Position(2) = ax1.Position(2) - 0.15; % Move the secondary axis down
end
